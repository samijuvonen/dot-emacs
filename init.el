  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; DO NOT EDIT THIS FILE. Edit emacs.org instead and tangle: C-c C-v C-t.  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Benchmark init

;;    This is for figuring out why startup is slow, normally disabled.

;;    Installation: Run make inside the directory where you installed
;;    benchmark-init, this will produce the benchmark-init-loaddefs.el file. Then
;;    place the following code as early as possible in your Emacs initialization
;;    script. 


;; [[file:emacs.org::*Benchmark%20init][Benchmark\ init:1]]
;; (add-to-list 'load-path "~/.emacs.d/vendor/benchmark-init-el/")
;; (require 'benchmark-init-loaddefs)
;; (benchmark-init/activate)
;; Benchmark\ init:1 ends here

;; Name and email


;; [[file:emacs.org::*Name%20and%20email][Name\ and\ email:1]]
(defvar at-sign "@")
(defvar my-domain "juvonen.org")
;; default name and email address
(setq user-full-name "Sami Juvonen"
      user-email (concat "sami" at-sign my-domain)
      )
;; Name\ and\ email:1 ends here

;; Turn on debug

;; Remember to turn it off at end.


;; [[file:emacs.org::*Turn%20on%20debug][Turn\ on\ debug:1]]
(setq debug-on-error t)
(setq debug-on-quit t)
;; Turn\ on\ debug:1 ends here

;; Configure package manager

;; This configures the Emacs package manager. I try to keep it simple:
;; - Orgmode from orgmode.org
;; - prefer stable(r) packages, so only use Melpa-stable and GNU Elpa

;; I use use-package for loading and configuring all packages if at all possible.
;; This makes this configuration file much more modular and manageable. I hope
;; to avoid another Emacs bankruptcy. Been there, done that, rm -f'd .emacs...


;; [[file:emacs.org::*Configure%20package%20manager][Configure\ package\ manager:1]]
(setq load-prefer-newer t)

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("org" . "http://orgmode.org/elpa/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ;;("melpa" . "https://melpa.org/packages/")
        ))

(setq package-archive-priorities  '(
                                    ("gnu" . 30)
                                    ("org" . 30)
                                    ("melpa-stable" . 20)
                                    ("melpa" . 0)
                                    ))

(package-initialize)

;; These don't seem to work the way I think they would.
;; use-package configuration - needs to be set before refresh
;;(setq use-package-always-ensure t)
;; (setq use-package-always-pin "melpa-stable")

;; Bootstrap `use-package'. Install it if not installed already.
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))
(use-package bind-key ;; part of use-package
  :commands (bind-key) )


(defvar my/vendor-dir (expand-file-name "vendor" user-emacs-directory))
(unless (file-directory-p my/vendor-dir) (make-directory my/vendor-dir))
(add-to-list 'load-path my/vendor-dir)
(dolist (pkg (directory-files my/vendor-dir t "\\w+"))
  (when (file-directory-p pkg)
    (add-to-list 'load-path pkg)))
;; Configure\ package\ manager:1 ends here

;; Custom utility functions


;; [[file:emacs.org::*Custom%20utility%20functions][Custom\ utility\ functions:1]]
(defun beautify-json ()
  "Run JSON through Python. From https://writequit.org/org/settings.html"
  (interactive)
  (let ((b (if mark-active (min (point) (mark)) (point-min)))
        (e (if mark-active (max (point) (mark)) (point-max))))
    (shell-command-on-region b e
                             "python -mjson.tool" (current-buffer) t))
  )

(defun modi/switch-to-scratch-and-back (arg)
  "Toggle between *scratch-MODE* buffer and the current buffer.
If a scratch buffer does not exist, create it with the major mode set to that
of the buffer from where this function is called.

        COMMAND -> Open/switch to a scratch buffer in the current buffer's major mode
    C-0 COMMAND -> Open/switch to a scratch buffer in `fundamental-mode'
    C-u COMMAND -> Open/switch to a scratch buffer in `org-mode'
C-u C-u COMMAND -> Open/switch to a scratch buffer in `emacs-elisp-mode'

source: http://emacs.stackexchange.com/questions/80/how-can-i-quickly-toggle-between-a-file-and-a-scratch-buffer-having-the-same-m/81#81
"
  (interactive "p")
  (if (and (= arg 1) ; no prefix
           (string-match-p "\\*scratch" (buffer-name)))
      (switch-to-buffer (other-buffer))
    (let ((mode-str (cl-case arg
                      (0  "fundamental-mode") ; C-0
                      (4  "org-mode") ; C-u
                      (16 "emacs-lisp-mode") ; C-u C-u
                      (t  (format "%s" major-mode))))) ; no prefix
      (switch-to-buffer (get-buffer-create
                         (concat "*scratch-" mode-str "*")))
      (funcall (intern mode-str))))) ; http://stackoverflow.com/a/7539787/1219634

(defalias 'scratch 'modi/switch-to-scratch-and-back)

;; this allows creating dir path from find-file automagically.
;; http://mbork.pl/2016-07-25_Making_directories_on_the_fly
(defun make-parent-directory ()
  "Make sure the directory of `buffer-file-name' exists."
  (make-directory (file-name-directory buffer-file-name) t))

(add-hook 'find-file-not-found-functions #'make-parent-directory)

;;
;; From http://cpb83.github.io/post/Org-babel-tangle_building_a_hugo_blog/
;;
(defun hugo-post (title)
  (interactive "sTitle: ")
  (org-insert-heading) (insert title)
  (insert (concat "\n"
                  "#+begin_src html :tangle /tmp/blog/content/post/" (replace-regexp-in-string " " "_" title) ".md\n"
                  "+++\n"
                  "categories = []\n"
                  "title = \"" title "\"\n"
                  "date = \"" (format-time-string "%Y-%m-%d %H:%M" (org-current-time)) "\n"
                  "+++\n"
                  "\n\n\n\n"
                  "#+end_src")))

(defun hugo-setup ()
  ;;run me in the org file for your blog!
  (interactive)
  (shell-command "rm -rf /tmp/blog; mkdir -p /tmp/blog/content/post /tmp/blog/themes /tmp/blog/layouts/partials/ /tmp/blog/static/")
  (shell-command "git clone **whatever you like** /tmp/blog/themes/theme")
  (org-babel-tangle))
;; Custom\ utility\ functions:1 ends here

;; Startup

;; [[file:emacs.org::*Startup][Startup:1]]
(setq inhibit-startup-message 't       ;; yes, I know you're Emacs
      initial-scratch-message ""       ;; we're friends already
      inhibit-splash-screen t          ;; really
      ) 
(fset 'display-startup-echo-area-message #'ignore) ;; c'mon!

;; save Emacs layout on exit
(desktop-save-mode)
;; Startup:1 ends here

;; Backups and cached persistence data


;; [[file:emacs.org::*Backups%20and%20cached%20persistence%20data][Backups\ and\ cached\ persistence\ data:1]]
;; set up a global cache for emacsfluvia
(defvar my/cache-dir )
(if (eq system-type 'gnu/linux)
    (if (eq nil (getenv "XDG_CACHE_HOME"))
        (setq my/cache-dir (expand-file-name ".cache/emacs" (getenv "HOME")))      
      (setq my/cache-dir (expand-file-name "emacs" (getenv "XDG_CACHE_HOME"))))
  (setq my/cache-dir (expand-file-name "cache" user-emacs-directory))  
  )

(unless (file-directory-p my/cache-dir)
  (make-directory my/cache-dir t))
(unless (file-directory-p (expand-file-name ".gitignore" my/cache-dir))
  (with-temp-file (expand-file-name ".gitignore" my/cache-dir)
    (insert "*\n!.gitignore\n")))

(defvar my/backup-dir (expand-file-name "backup" my/cache-dir))
(unless (file-directory-p my/backup-dir)
  (make-directory my/backup-dir t))
(setq backup-directory-alist `((".*" . ,my/backup-dir)))
      
(setq make-backup-files t             
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 2               ; oldest versions to keep
      kept-new-versions 5               ; newest versions to keep
      )

;; Save actions persistently across sessions.
(use-package savehist
  :init
  (setq savehist-file (expand-file-name "history" my/cache-dir)
        history-length 1000
        history-delete-duplicates t
        savehist-save-minibuffer-history t
        savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring))
  :config
  (savehist-mode 1))
;; recent files
(use-package recentf
  :init
  (setq recentf-max-saved-items 200
        recentf-max-menu-items 20
        recentf-save-file (expand-file-name "recent"  my/cache-dir))
  :config
  (recentf-mode t))

;; save place in edited files
(use-package saveplace
  :init
  (setq-default save-place t)
  (setq save-place-file (expand-file-name "places" my/cache-dir))
  )

;; Auto-save
;; Save in the visited file, don't create separate autosave files.
;; We have undo and git.
(setq auto-save-visited-file-name t
      auto-save-interval 100         ;; default is 300 chars
      auto-save-timeout 10           ;; default is 30 sec
      )

(if (version< emacs-version "24.4")
      () ; should maybe do something here
    ;; Emacs 24.4+, save on frame focus lost. May be good enough.
    (add-hook 'focus-out-hook (lambda () (save-some-buffers t))))
;; Backups\ and\ cached\ persistence\ data:1 ends here

;; Ido
;;     I am one of those people who can't seem to grok Helm, so I use Ido.

;;     6/2016: Now disabled, using Ivy/Swiper/Counsel instead.


;; [[file:emacs.org::*Ido][Ido:1]]
(use-package ido
  :disabled t
  :ensure t
  :init
  (setq ido-everywhere t
        ido-enable-flex-matching t
        ido-show-dot-for-dired t
        ido-enable-dot-prefix t
        ido-create-new-buffer 'always
        ido-max-window-height 0.4
        ido-use-filename-at-point 'guess
        ido-use-url-at-point t
        ido-max-prospects 20
        ido-max-dir-file-cache 400
        ido-enter-matching-directory t
        ido-use-virtual-buffers t
        ido-save-directory-list-file (expand-file-name "ido.last" my/cache-dir)
        ido-default-file-method 'selected-window
        ido-default-buffer-method 'selected-window)
  :config
  (ido-mode +1)
  )

;; smex: replace regular M-x
;; remember recently and most frequently used commands
(use-package smex
  :disabled t
  :ensure t
  :init
  (setq smex-history-length 40
        smex-save-file (expand-file-name "smex.items" my/cache-dir))
  :bind
  (("M-x" . smex)
   ("<menu>" . smex) ;; linux menu key runs execute-extended-command by default
   ("M-X" . smex-major-mode-commands)
   ("C-c C-c M-x" . execute-extended-command))

  :config
  (smex-initialize))

  ;;; smarter fuzzy matching for ido
(use-package flx-ido
  :disabled t
  :ensure t
  :init
  (setq ido-use-faces nil) ;; to see flx highlights
  :config
  (flx-ido-mode 1))

(use-package ido-ubiquitous
  :ensure t
  :disabled t
  :config
  (ido-ubiquitous-mode +1))
;; Ido:1 ends here

;; Ivy

;; Ivy is another piece of Emacs magic from Oleh Krehel a.k.a. abo-abo. It works in the same 
;; space as Ido and Helm. I've found it more intuitive and just plain awesome since I installed it.
;; I'm using the stable version but reading his blog makes me want to install the dev version. So
;; far I've been able to resist.


;; [[file:emacs.org::*Ivy][Ivy:1]]
(use-package swiper
  :ensure t
  :diminish ""
  :init
  (use-package counsel
    :ensure t)
  (use-package ivy
    :ensure t)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 10)
  (setq ivy-count-format "(%d/%d) ")
  (setq magit-completing-read-function 'ivy-completing-read)
  (setq projectile-completion-system 'ivy)
  :config
  (ivy-mode 1)
  ;; (global-set-key (kbd "C-s") 'swiper)
  ;; (global-set-key (kbd "M-x") 'counsel-M-x)
  ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;; (global-set-key (kbd "C-h f") 'counsel-describe-function)
  ;; (global-set-key (kbd "C-h v") 'counsel-describe-variable)
  ;; (global-set-key (kbd "C-h l") 'counsel-load-library)
  ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  ;; ;; Ivy-based interface to shell and system tools
  ;; (global-set-key (kbd "C-c g") 'counsel-git)
  ;; (global-set-key (kbd "C-c G") 'counsel-git-grep)
  ;; (global-set-key (kbd "C-c k") 'counsel-ag)
  ;; (global-set-key (kbd "C-x l") 'counsel-locate)
  ;; ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  ;; ;; ivy-resume resumes the last Ivy-based completion.
  ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
  :bind
  (("C-s" . counsel-grep-or-swiper)
   ("M-x" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)
   ("C-h f" . counsel-describe-function)
   ("C-h v" . counsel-describe-variable)
   ("C-h I" . counsel-info-lookup-symbol)
   ("C-h u" . counsel-unicode-char)
   ("C-c g" . counsel-git)
   ("C-c G" . counsel-git-grep)
   ("C-c A" . counsel-ag)
   ("C-c L" . counsel-locate)
   ("C-c C-r" . ivy-resume)
   ;; ("C-c v" . ivy-push-view) ; these are not yet in ivy stable 2016-07-31
   ;; ("C-c V" . ivy-pop-view)
   )
  )
;; Ivy:1 ends here

;; Modeline information


;; [[file:emacs.org::*Modeline%20information][Modeline\ information:1]]
(setq line-number-display-limit-width 10000)
(line-number-mode t)
(column-number-mode t)            ;; show some more leg
(size-indication-mode t)

;; diminish keeps modeline tidy
(use-package diminish
  :ensure t
  )

(diminish 'auto-fill-function "")
(diminish 'buffer-face-mode "" )
(diminish 'google-this-mode "")
  
;; Modeline\ information:1 ends here

;; Minor modes


;; [[file:emacs.org::*Minor%20modes][Minor\ modes:1]]
(delete-selection-mode 1)
(electric-pair-mode 1)

(setq auto-revert-verbose nil)         ;; no whining
(global-auto-revert-mode 1)            ;; if file changes on disk, reread it

(setq-default indent-tabs-mode nil     ;; we don't like tabs by default
              tab-width 4              ;; not too wide
              fill-column 80
              sentence-end-double-space nil)   ;; not in high school any more
;; Minor\ modes:1 ends here

;; Hooks


;; [[file:emacs.org::*Hooks][Hooks:1]]
(add-hook 'text-mode-hook 'turn-on-auto-fill)
;; Hooks:1 ends here

;; Misc buffer options


;; [[file:emacs.org::*Misc%20buffer%20options][Misc\ buffer\ options:1]]
(prefer-coding-system 'utf-8)          ;; be modern
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

(setq-default find-file-visit-truename t) ;; resolve symlinks
(setq view-read-only t)                ;; visit read-only files in view-mode
(setq confirm-nonexistent-file-or-buffer nil)
(setq next-line-add-newlines nil)
(setq require-final-newline t)
(setq kill-whole-line t)


;; unique buffer names
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'forward
        uniquify-separator "/"
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*"))

;; volatile highlights - temporarily highlight changes from pasting etc
(use-package volatile-highlights
  :ensure t
  :diminish ""
  :config
  (volatile-highlights-mode t)
  )

(use-package ibuffer
  :commands (ibuffer)
  :bind ("C-x C-b" . ibuffer))

(use-package which-func
  :init
  (setq which-func-unknown "")
  :config
  (which-function-mode)
  )

(add-to-list 'display-buffer-alist
             '("wclock" . ((display-buffer-pop-up-window) .
                           ((inhibit-same-window . t))) 
               ))
;; Misc\ buffer\ options:1 ends here

;; TODO Set libraries unwritable 

;;      Need to make this toggleable - package-install also thinks it's unwritable


;; [[file:emacs.org::*Set%20libraries%20unwritable][Set\ libraries\ unwritable:1]]
;; Always open installed Emacs files as read-only. From EmacsWiki.
;; (dir-locals-set-class-variables
;;  'unwritable-directory
;;  '((nil . ((buffer-read-only . t)))))
;; (dir-locals-set-directory-class (expand-file-name "elpa" user-emacs-directory) 'unwritable-directory)
;; (dir-locals-set-directory-class (expand-file-name "vendor" user-emacs-directory) 'unwritable-directory)
;; Set\ libraries\ unwritable:1 ends here

;; Defaults for user interaction


;; [[file:emacs.org::*Defaults%20for%20user%20interaction][Defaults\ for\ user\ interaction:1]]
(fset 'yes-or-no-p 'y-or-n-p)          ;; less rsi
(setq suggest-key-bindings 6           ;; be friendly, show for 6s
      echo-keystrokes 0.5)             ;; default is 1s

(setq enable-recursive-minibuffers t)

(global-hl-line-mode 1)
(setq show-paren-delay 0)
(show-paren-mode 1)

(blink-cursor-mode nil)                ;; stop the madness
;;(setq visible-bell t)                  ;; be less annoying
;;(setq ring-bell-function 'ignore) 
(defun my/terminal-visible-bell ()
   "A friendlier visual bell effect. Flash the modeline."
   (invert-face 'mode-line)
   (run-with-timer 0.1 nil 'invert-face 'mode-line))
 
 (setq visible-bell nil
       ring-bell-function 'my/terminal-visible-bell)

;; scrolling. TODO: experiment
(setq scroll-margin 2
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

(setq ediff-window-setup-function 'ediff-setup-windows-plain)

(setq read-file-name-completion-ignore-case t) ;; case-insensitive completion

(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))

(setq tab-always-indent 'complete)
(add-to-list 'completion-styles 'initials t)
;; Defaults\ for\ user\ interaction:1 ends here

;; Regular expressions


;; [[file:emacs.org::*Regular%20expressions][Regular\ expressions:1]]
(use-package re-builder
  :config (setq reb-re-syntax 'rx))
;; Regular\ expressions:1 ends here

;; Performance options


;; [[file:emacs.org::*Performance%20options][Performance\ options:1]]
(setq gc-cons-threshold (* 50 1024 1024) ;; 8 -> 100MB
      large-file-warning-threshold (* 100 1024 1024)
      message-log-max 16384)

;; seed pseudo-random number generator
(random t)
;; Performance\ options:1 ends here

;; Looks: fonts and themes

;; [[file:emacs.org::*Looks:%20fonts%20and%20themes][Looks:\ fonts\ and\ themes:1]]
;; use bbatsov's ported Solarized theme 
(use-package solarized-theme
  :ensure t
  :init
  (setq solarized-use-variable-pitch nil
        ;; Prefer italics over bold
        solarized-use-less-bold t
        solarized-use-more-italic t
        ;; Emphasize docstrings
        solarized-distinct-doc-face t 
        ;; make the fringe stand out from the background
        solarized-distinct-fringe-background t
        ;; make the modeline high contrast
        solarized-high-contrast-mode-line nil
        ;; colors for indicators such as git:gutter, flycheck and similar
        solarized-emphasize-indicators t
        ;; size of org-mode headlines (but keep other size-changes)
        solarized-scale-org-headlines t
        ;; Avoid all font-size changes
        ;; solarized-height-minus-1 1
        ;; solarized-height-plus-1 1
        ;; solarized-height-plus-2 1
        ;; solarized-height-plus-3 1
        ;; solarized-height-plus-4 1
        )
  :config
  (load-theme 'solarized-light 'no-confirm)
  )

;; Monospace fonts
;; ---------------
;; (set-face-attribute 'default nil
;;                     :family "Source Code Pro" :height 115 :weight 'regular)
;; (set-face-attribute 'default nil
;;                     :family "Fira Mono" :height 120 :weight 'regular)
(set-face-attribute 'default nil
                    :family "DejaVu Sans Mono" :height 110 :weight 'regular)


;; Variable pitch faces
;; --------------------
;; (set-face-attribute 'variable-pitch nil
;;                     :family "Fira Sans" :height 125 :weight 'regular)
;; (set-face-attribute 'variable-pitch nil
;;                      :family "Linux Biolinum O" :height 140 :weight 'regular)
;; (set-face-attribute 'variable-pitch nil
;;                     :family "Lato" :height 130 :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :family "DejaVu Sans Book" :height 130 :weight 'regular)
;; (set-face-attribute 'variable-pitch nil
;;                     :family "Source Sans Pro" :height 125 :weight 'regular)

(global-font-lock-mode t)
(setq x-underline-at-descent-line t)

(set-face-background hl-line-face "white" )

(add-hook 'text-mode-hook 'variable-pitch-mode)
(add-hook 'Info-mode-hook 'variable-pitch-mode)


(use-package beacon
  :pin gnu
  :disabled t
  :ensure t
  :diminish ""
  :init (beacon-mode 1)
  )
;; Looks:\ fonts\ and\ themes:1 ends here

;; Emacs windows
;; Winner-mode returns the previous window layout with C-c <left> in case
;; something messed it up.


;; [[file:emacs.org::*Emacs%20windows][Emacs\ windows:1]]
(setq split-height-threshold nil)
(setq split-width-threshold 150)

(use-package winner
  :ensure t
  :defer 10
  :config
  (winner-mode 1)
  )
;; Emacs\ windows:1 ends here

;; Emacs frames
;; Emacs frames are what the OS calls "windows".

;; [[file:emacs.org::*Emacs%20frames][Emacs\ frames:1]]
  ;; don't want these
  (when (functionp 'set-scroll-bar-mode) (set-scroll-bar-mode 'nil))
  (when (functionp 'blink-cursor-mode) (blink-cursor-mode -1))
  (when (functionp 'tool-bar-mode) (tool-bar-mode -1))

  ;; losing my neckbeard cred with these:
  (when (functionp 'mouse-wheel-mode) (mouse-wheel-mode 1))
  (when (functionp 'menu-bar-mode) (menu-bar-mode 1))
  (when (functionp 'tooltip-mode) (tooltip-mode 1))

;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name)) "%b")))
      )

;; clipboardy thingies
(setq x-select-enable-clipboard t
      x-select-enable-primary t
      save-interprogram-paste-before-kill t)
;; Emacs\ frames:1 ends here

;; Navigation


;; [[file:emacs.org::*Navigation][Navigation:1]]
  (use-package avy
    :pin gnu
    :ensure t
    :init (avy-setup-default)
    :bind 
    (("M-g g" . avy-goto-line)
     ("M-g M-g" . avy-goto-line)
     ("C-\\" . avy-goto-char-2)
     ("M-g c" . avy-goto-char-timer))
    )


  (use-package ace-window
    :pin gnu
    :ensure t
    :bind ("C-x o" . ace-window)
    ;;:config
    ;;(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    )

  ;; imenu rescan
  (setq imenu-auto-rescan t)
;; Navigation:1 ends here

;; Expand-region


;; [[file:emacs.org::*Expand-region][Expand-region:1]]
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))
;; Expand-region:1 ends here

;; Which-key


;; [[file:emacs.org::*Which-key][Which-key:1]]
(use-package which-key
  :config
  (which-key-mode))
;; Which-key:1 ends here

;; Encryption


;; [[file:emacs.org::*Encryption][Encryption:1]]
(setq epg-gpg-program "gpg2")
(setq epa-file-encrypt-to '(user-email))
;; Encryption:1 ends here

;; Google this


;; [[file:emacs.org::*Google%20this][Google\ this:1]]
(use-package google-this
  :diminish t
  :config
  (google-this-mode 1)
  )
;; Google\ this:1 ends here

;; Undo-tree

;; 7/2016: disabled because getting weird tracebacks.
;; TODO: file a bug?


;; [[file:emacs.org::*Undo-tree][Undo-tree:1]]
  (use-package undo-tree
    :disabled t
    :ensure t
    :diminish ""
    :config (global-undo-tree-mode) 
    )
;; Undo-tree:1 ends here

;; Lorem ipsum

;; [[file:emacs.org::*Lorem%20ipsum][Lorem\ ipsum:1]]
(use-package lorem-ipsum
  :load-path "vendor/emacs-lorem-ipsum"
  :commands (lorem-ipsum-insert-paragraphs lorem-ipsum-insert-sentences)
  )
;; Lorem\ ipsum:1 ends here

;; Crux

;; Crux is Bozhidar Batsov's Collection of Ridiculously Useful eXtensions. It is
;; what it says on the tin, versions of useful functions that are part of many init.el.


;; [[file:emacs.org::*Crux][Crux:1]]
(use-package crux
  :ensure t
  :bind
  (("C-a" . crux-move-beginning-of-line)
   ("C-c n" . crux-cleanup-buffer-or-region)
   ("C-c C-e" . crux-eval-and-replace)
   ("C-c 2" . crux-duplicate-current-line-or-region)
   ("C-c 3" . crux-duplicate-and-comment-current-line-or-region)
   ("C-c r" . crux-rename-file-and-buffer)
   ("C-c R" . crux-reopen-as-root)
   ("C-c o" . crux-open-with))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-line comment-or-uncomment-region)
  )
;; Crux:1 ends here

;; Version Control

;; Magit alone along with Orgmode would be enough reason to use Emacs.


;; [[file:emacs.org::*Version%20Control][Version\ Control:1]]
(use-package magit
  :ensure t
  :diminish "g"
  :commands (magit-status)
  :bind 
  (("<f8>" . magit-status))
  )

(use-package with-editor
  :ensure t
  :config
  (shell-command-with-editor-mode)
  )

(use-package git-timemachine
  :ensure t
  )

(use-package diff-hl
  :pin gnu
  :ensure t
  :config
  (global-diff-hl-mode)
  )
;; Version\ Control:1 ends here

;; Ack

;;  Ack supports ack, ag, git grep, etc.


;; [[file:emacs.org::*Ack][Ack:1]]
(use-package ack
  :ensure t
  :pin gnu
  :commands ack)
;; Ack:1 ends here

;; Tramp

;; Don't run an editor on a server, edit the files from the comfort of a local Emacs.


;; [[file:emacs.org::*Tramp][Tramp:1]]
(use-package tramp
  :config
  (setq tramp-default-method "ssh")
  )
;; Tramp:1 ends here

;; PDF Tools

;; PDF Tools requires =dnf install -y poppler-glib-devel= on Fedora.


;; [[file:emacs.org::*PDF%20Tools][PDF\ Tools:1]]
(use-package pdf-tools
  :ensure t
  :defer
  :config
  (pdf-tools-install)
  )
;; PDF\ Tools:1 ends here

;; YASnippets


;; [[file:emacs.org::*YASnippets][YASnippets:1]]
(use-package yasnippet
  :defer t
  :if (not noninteractive)
  :diminish yas-minor-mode
  :commands (yas-global-mode yas-minor-mode) 
  )
;; YASnippets:1 ends here

;; Orgmode


;; [[file:emacs.org::*Orgmode][Orgmode:1]]
(use-package org
  :ensure org-plus-contrib
  :defer t
  :pin org
  :bind 
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c b" . org-iswitchb)
   ("C-c t" . org-time-stamp-inactive)) ; flycheck steals C-c ! map
  :init
  (eval-after-load 'ox '(require 'ox-koma-letter))
  (eval-after-load 'ox-latex
    '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t) 
    )
  :config 
  (setq org-modules '(org-crypt org-docview org-habit org-info
                                org-protocol org-bookmark org-bullets
                                org-checklist org-eshell org-learn org-man 
                                org-toc)
        )
  (add-to-list 'org-structure-template-alist
               '("py" "\n#+BEGIN_SRC python\n?\n#+END_SRC\n"
                 "<src lang=\"python\">\n?\n</src>")
               )
  (add-to-list 'org-structure-template-alist
               '("el" "\n#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC\n"
                 "<src lang=\"emacs-lisp\">\n?\n</src>")
               )
  (add-to-list 'org-structure-template-alist
               '("sh" "\n#+BEGIN_SRC sh\n?\n#+END_SRC\n"
                 "<src lang=\"sh\">\n?\n</src>")
               )   

  (setq org-directory "~/Documents/Org"
        org-agenda-files (list "~/Documents/Org")
        org-default-notes-file "~/Documents/Org/notes.org"
        org-startup-folded "contents"
        org-archive-folder "~/Documents/Org/.archive"
        org-special-ctrl-a/e t
        ;;org-ctrl-k-protect-subtree t
        org-catch-invisible-edits 'show ; TODO check 'smart
        org-return-follows-link t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-preserve-indentation t
        org-support-shift-select t
        )
  (setq org-ellipsis "…")
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" 
                          "PHONE" "MEETING")
                ))
        )
  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))
                ))
        )
  (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "~/Documents/Org/todo.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("n" "Note" entry
           (file+headline "~/Documents/Org/notes.org" "Unorganized")
           "* %?\n  %i\n  %a")
          ("j" "Journal" entry
           (file+datetree "~/Documents/Org/journal.org.gpg")
           "* %u %?\n  %i\n  %a")
          )
        )
  (add-hook 'org-mode-hook
            (lambda () (imenu-add-to-menubar "Index")
              (org-bullets-mode 1)) 
            )

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (calc . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (js . t)
     (makefile . t)
     (python . t)
     (R . t)
     (ruby . t)
     (sh . t)
     ))

  (setq texcmd "latexmk -xelatex")
  (setq org-latex-pdf-process (list texcmd))
  
  ) ;; End of use-package org

(use-package org-bullets
  :init (setq org-bullets-bullet-list '("●" "★" "❀" "►" "•" "▸" "☢"))
  :defer t
  :ensure t
  :commands (org-bullets-mode)
  )

(use-package ob-ipython
  :load-path "vendor/ob-ipython"
  :defer t
  :config 
  (setq ob-ipython-command "ipython3")
  (add-to-list 'org-structure-template-alist
               '("ipy" "\n#+BEGIN_SRC ipython :session\n?\n#+END_SRC\n"
                 "<src lang=\"python\">\n?\n</src>"))
  )

(use-package ox-pandoc
  :defer t
  :ensure t
  )

(use-package org-gcal
  :ensure t
  )

(use-package org-gnome
  :ensure t
  )

 
;; Orgmode:1 ends here

;; Ansible


;; [[file:emacs.org::*Ansible][Ansible:1]]
(use-package yaml-mode
  :ensure t
  :init 
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
  (add-hook 'yaml-mode-hook
            '(lambda ()
               (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  )

(use-package ansible
  :ensure t
  ;;:config (ansible::set-default-keymap)
  )

(use-package ansible-doc
  :ensure t
  :init
  (add-hook 'yaml-mode-hook #'ansible-doc-mode)
  )

(use-package company-ansible
  :ensure t
  )
;; Ansible:1 ends here

;; Docker


;; [[file:emacs.org::*Docker][Docker:1]]
(use-package dockerfile-mode
  :ensure t
  )

(use-package docker
  :ensure t
  )
;; Docker:1 ends here

;; Puppet


;; [[file:emacs.org::*Puppet][Puppet:1]]
(use-package puppet-mode
  :ensure t
  )
;; Puppet:1 ends here

;; Vagrant


;; [[file:emacs.org::*Vagrant][Vagrant:1]]
(use-package vagrant
  :ensure t)
;; (use-package vagrant-tramp
;;   :ensure t)
;; Vagrant:1 ends here

;; General programming


;; [[file:emacs.org::*General%20programming][General\ programming:1]]
;; compilation: don't ask about saving, don't save, and add helper to shell mode.
(setq compilation-ask-about-save nil)
(setq compilation-save-buffers-predicate '(lambda () nil))
(add-hook 'shell-mode-hook 'compilation-shell-minor-mode)

;; make a file executable if it starts with #!
(add-hook
 'after-save-hook
 'executable-make-buffer-file-executable-if-script-p)


(use-package company
  :pin gnu
  :ensure t
  :config
    (global-company-mode)
    (use-package company-quickhelp
      :ensure t
      :config
      (setq company-quickhelp-idle-delay 3)
      (company-quickhelp-mode 1)
      )
    (use-package company-emoji
      :ensure t
      :config
      (add-hook 'markdown-mode-hook 'company-mode)
      (add-hook 'markdown-mode-hook 'company-emoji-init) 
      )
    (use-package company-jedi
      :disabled t
      :ensure t
      :config (add-to-list 'company-backends 'company-jedi) 
      )  
  )


(use-package flycheck
  :ensure t
  :defer t
  :commands (flycheck-mode)
  :diminish ""
  :init (global-flycheck-mode)
  :bind
  (("M-g M-n" . flycheck-next-error)
   ("M-g M-p" . flycheck-previous-error)
   ("M-g M-=" . flycheck-list-errors))
  :config
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  )

(use-package aggressive-indent
  :pin gnu
  :ensure t
  :commands (aggressive-indent-mode)
  :config 
  (add-to-list 'aggressive-indent-excluded-modes 'elpy-mode)  ;; aggressive indent is too aggressive for python
  (aggressive-indent-global-mode 1))

(use-package rainbow-mode
  :pin gnu
  :ensure t
  )

(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1)
    )


(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'prog-mode-hook 'imenu-add-menubar-index)
(add-hook 'prog-mode-hook 'aggressive-indent-mode)
;; General\ programming:1 ends here

;; Makefile


;; [[file:emacs.org::*Makefile][Makefile:1]]
(defun my-makefile-hook
    (setq indent-tabs-mode t)
  )
(add-hook 'makefile-mode-hook 'my-makefile-hook)
;; Makefile:1 ends here

;; Projectile


;; [[file:emacs.org::*Projectile][Projectile:1]]
(use-package projectile
  :ensure t
  :config (projectile-global-mode 1)
  :diminish projectile-mode
  :init
  (progn
    (setq projectile-file-exists-remote-cache-expire (* 30 60))
    (setq projectile-switch-project-action 'projectile-find-file-dwim)))
;; Projectile:1 ends here

;; Python


;; [[file:emacs.org::*Python][Python:1]]
(use-package elpy
  :ensure t
  :commands (elpy-enable)
  :diminish "🐍"
  :init 
  (setq elpy-rpc-backend "jedi"
        elpy-rpc-project-specific 't
        )
  (elpy-enable)
  :config
  (elpy-use-ipython "ipython3") 
  (when (fboundp 'flycheck-mode)
    (setq elpy-modules (delete 'elpy-module-flymake elpy-modules)))
  ;; fix PEP8 compliance on save
  (use-package py-autopep8
    :ensure t
    :config
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
  ;; emacs ipython notebook
  (use-package ein
    :ensure t)
  )
;; Python:1 ends here

;; Emacs lisp


;; [[file:emacs.org::*Emacs%20lisp][Emacs\ lisp:1]]
(use-package paredit
  :ensure t
  :commands (paredit-mode)
  :config
  (progn
    (defvar electrify-return-match "[\]}\)\"]"
      "If this regexp matches the text after the cursor, do an \"electric\"
       return.")

    (defun electrify-return-if-match (arg)
      "If the text after the cursor matches
       `electrify-return-match' then open and indent an empty line
        between the cursor and the text. Move the cursor to the new line."
      (interactive "P")
      (let ((case-fold-search nil))
        (if (looking-at electrify-return-match)
            (save-excursion (newline-and-indent)))
        (newline arg)
        (indent-according-to-mode)))
    ))

(defun my/lisp-mode ()
  (paredit-mode t) 
  (turn-on-eldoc-mode)
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)
  (local-set-key (kbd "RET") 'electrify-return-if-match)
  (eldoc-add-command 'electrify-return-if-match)
  (show-paren-mode t))

(add-hook 'emacs-lisp-mode-hook 'my/lisp-mode)
(add-hook 'eval-expression-minibuffer-setup-hook 'my/lisp-mode)

;;(use-package rainbow-delimiters)
;; Emacs\ lisp:1 ends here

;; Ruby

;; Ruby-mode is included with Emacs (23+).


;; [[file:emacs.org::*Ruby][Ruby:1]]
(use-package ruby-mode
  :diminish "💎"
  )

;; Rubyish file extensions:
(add-to-list 'auto-mode-alist
             '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" 
               . ruby-mode))
(add-to-list 'auto-mode-alist
             '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" 
               . ruby-mode))

;; inf-ruby gives us a Ruby REPL
;; not in Melpa-stable. TODO put it in vendor/
(use-package inf-ruby
  :config 
  (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
  )
;; Ruby:1 ends here

;; Go


;; [[file:emacs.org::*Go][Go:1]]
;; install godef w/ go get github.com/rogpeppe/godef
(use-package go-mode
  :ensure t
  )

;; requires gocode: go get -u github.com/nsf/gocode
(use-package go-eldoc
  :ensure t
  )
(use-package company-go
  :ensure t
  )


(add-hook 'go-mode-hook 
          (lambda ()
            (add-hook 'before-save-hook #'gofmt-before-save)
            (local-set-key (kbd "M-.") #'godef-jump)
            (flycheck-mode 1)))
(add-hook 'go-mode-hook 'go-eldoc-setup)
;; Go:1 ends here

;; Web mode


;; [[file:emacs.org::*Web%20mode][Web\ mode:1]]
(use-package web-mode
  :ensure t
  :init
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t)
  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-enable-current-column-highlight t)
  (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev)))
        )
  :config
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.dtl\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  )
;; Web\ mode:1 ends here

;; AUCTeX

;;    -dnf install -y emacs-auctex-


;; [[file:emacs.org::*AUCTeX][AUCTeX:1]]
(when (require 'tex-site nil 'noerror)
  ;; currently using Auctex from Fedora.
  ;; these are recommended in info
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  ;;(setq-default TeX-master nil)
  ;; we don't care for Computer Modern, let's use All. The. Fonts.
  (setq latex-run-command  "latexmk -xelatex")
  ;; mkiv is the recommended ConTeXt version
  (setq ConTeXt-Mark-version "IV")
  )
;; AUCTeX:1 ends here

;; Proselint

;; [[file:emacs.org::*Proselint][Proselint:1]]
;; Requires 'pip install proselint'
;;
;; From https://github.com/amperser/proselint/tree/master/plugins/flycheck
;; (flycheck-define-checker proselint
;;   "A linter for prose."
;;   :command ("proselint" source-inplace)
;;   :error-patterns
;;   ((warning line-start (file-name) ":" line ":" column ": "
;;             (id (one-or-more (not (any " "))))
;;             (message (one-or-more not-newline)
;;                      (zero-or-more "\n" (any " ") (one-or-more not-newline)))
;;             line-end))
;;   :modes (text-mode org-mode markdown-mode gfm-mode))

;; (add-to-list 'flycheck-checkers 'proselint)

;; (add-hook 'text-mode-hook #'flycheck-mode)
;; (add-hook 'org-mode-hook #'flycheck-mode)
;; (add-hook 'markdown-mode-hook #'flycheck-mode)
;; (add-hook 'gfm-mode-hook #'flycheck-mode)
;; Proselint:1 ends here

;; Spelling
;;    Use wcheck-mode

;; [[file:emacs.org::*Spelling][Spelling:1]]
;; (use-package wcheck-mode
;;   :pin gnu
;;   :ensure t
;;   :commands (wcheck-mode wcheck-mode-languages wcheck-actions
;;                          wcheck-jump-forward wcheck-jump-backward)
;;   :init
;;   (setq wcheck-language-data
;;         '(("American English"
;;            (program . "aspell")
;;            (args "-l" "-d" "en_US")
;;            (action-program . "aspell")
;;            (action-args "-a" "-d" "en_US")
;;            (action-parser . wcheck-parser-ispell-suggestions))
;;           ("Finnish"
;;            (program . "enchant")
;;            (args "-l" "-d" "fi")
;;            (syntax . my-finnish-syntax-table)
;;            (action-program . "enchant")
;;            (action-args "-a" "-d" "fi")
;;            (action-parser . enchant-suggestion-menu))))

;;   :config
;;   (defun enchant-suggestions-menu (marked-text)
;;     (cons (cons "[Add to dictionary]" 'enchant-add-to-dictionary)
;;           (wcheck-parser-ispell-suggestions)))

;;   (defvar enchant-dictionaries-dir "~/.config/enchant")
;;   (defun enchant-add-to-dictionary (marked-text)
;;     (let* ((word (aref marked-text 0))
;;            (language (aref marked-text 4))
;;            (file (let ((code (nth 1 (member "-d" (wcheck-query-language-data
;;                                                   language 'action-args)))))
;;                    (when (stringp code)
;;                      (concat (file-name-as-directory enchant-dictionaries-dir)
;;                              code ".dic")))))
;;       (when (and file (file-writable-p file))
;;         (with-temp-buffer
;;           (insert word) (newline)
;;           (append-to-file (point-min) (point-max) file)
;;           (message "Added word \"%s\" to the %s dictionary"
;;                    word language)))))
;;   )  

;; use hunspell if we have it
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-really-hunspell t))

;; flyspell
(add-hook 'text-mode-hook (lambda ()
                            (flyspell-mode 1)))
(add-hook 'prog-mode-hook (lambda ()
                            (flyspell-prog-mode)))
;; Spelling:1 ends here

;; Markdown


;; [[file:emacs.org::*Markdown][Markdown:1]]
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode 
(("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init 
(setq markdown-command "pandoc -f markdown -t html5")
)
;; Markdown:1 ends here

;; Pandoc

;; [[file:emacs.org::*Pandoc][Pandoc:1]]
(use-package pandoc-mode
  :ensure t
  :init
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  :config
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
  )
;; Pandoc:1 ends here

;; Eshell


;; [[file:emacs.org::*Eshell][Eshell:1]]
(use-package eshell
  :commands eshell eshell-command
  :init
  (setq eshell-buffer-shorthand t
        eshell-cmpl-ignore-case t
        eshell-cmpl-cycle-completions nil
        eshell-history-size 10000
        eshell-save-history-on-exit t
        eshell-hist-ignoredups t
        eshell-glob-case-insensitive t
        eshell-scroll-to-bottom-on-input 'this)
  :config
  (progn
    (require 'em-smart)
    (setq eshell-where-to-jump 'begin
          eshell-review-quick-commands nil
          eshell-smart-space-goes-to-end t)
    (require 'em-cmpl)
    (require 'em-prompt)
    (require 'em-term)
    (require 'esh-opt)
    
    (setenv "PAGER" "cat")
    (defalias 'e 'find-file)
    (defalias 'ff 'find-file)
    (defalias 'vim 'find-file)
    (defalias 'emacs 'find-file-other-window)
    (defalias 'gd 'magit-diff-unstaged)
    (defalias 'gds 'magit-diff-staged)
    (defun eshell/d (&rest args)
      (dired (pop args) "."))
    
    (defun eshell/x ()
      "Closes the EShell session and gets rid of the EShell window."
      (kill-buffer)
      (delete-window))
    
    (defun eshell/gst (&rest args)
      (magit-status (pop args) nil)
      (eshell/echo))   ;; The echo command suppresses output

    (defun eshell/magit ()
      "Function to open magit-status for the current directory"
      (interactive)
      (magit-status default-directory))
    
    (add-to-list 'eshell-visual-commands "tmux")
    (add-to-list 'eshell-visual-commands "ssh")
    (add-to-list 'eshell-visual-commands "vim")
    (add-to-list 'eshell-visual-commands "links")
    (add-to-list 'eshell-visual-commands "elinks")
    (add-to-list 'eshell-visual-commands "alsamixer")
    (add-to-list 'eshell-visual-commands "nmtui")
    (add-to-list 'eshell-visual-commands "tail")

    (add-to-list 'eshell-visual-subcommands '(("git" "log" "diff" "show")))

    (defun eshell-here ()
      "https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
       Opens up a new shell in the directory associated with the
       current buffer's file. The eshell is renamed to match that
       directory to make multiple eshell windows easier."
      (interactive)
      (let* ((parent (if (buffer-file-name)
                         (file-name-directory (buffer-file-name))
                       default-directory))
             (height (/ (window-total-height) 3))
             (name   (car (last (split-string parent "/" t)))))
        (split-window-vertically (- height))
        (other-window 1)
        (eshell "new")
        (rename-buffer (concat "*eshell: " name "*"))

        ;;(insert (concat "ls"))
        ;;(eshell-send-input)
        ))

    (bind-key "C-!" 'eshell-here)
    (bind-key "<f2>" 'eshell-here)
    ))
;; Eshell:1 ends here

;; Dired


;; [[file:emacs.org::*Dired][Dired:1]]
(use-package dired
  :commands (dired)
  :config
  (setq dired-recursive-copies 'always
        dired-recursive-deletes 'always
        dired-dwim-target t
        ;; -F marks links with @
        dired-ls-F-marks-symlinks t
        ;;delete-by-moving-to-trash t
        ;; Auto refresh dired
        global-auto-revert-non-file-buffers t
        wdired-allow-to-change-permissions t
        wdired-allow-to-redirect-links t
        wdired-use-interactive-rename nil 
        wdired-confirm-overwrite t)
)

(add-hook 'dired-load-hook
          (lambda ()
            ;; Bind dired-x-find-file.
            (setq dired-x-hands-off-my-keys nil)
            (load "dired-x")
            ))

;; (add-hook 'dired-mode-hook
;;           (lambda ()
;;             ;; Set dired-x buffer-local variables here.  For example:
;;             ;;(dired-omit-mode 1)
;;             ))
;; Dired:1 ends here

;; Location and calendar


;; [[file:emacs.org::*Location%20and%20calendar][Location\ and\ calendar:1]]
;; where I hang my hat
(setq calendar-latitude 37.9
      calendar-longitude 122.9
      calendar-location-name "Berkeley, CA, US"
      calendar-time-zone 480
      calendar-standard-time-zone-name "PST"
      calendar-standard-daylight-time-zone-name "PDT")

(setq display-time-24hr-format t)

(setq display-time-world-list
      '(("America/Los_Angeles" "California")
        ("Europe/Helsinki" "Helsinki")
        ("UTC" "UTC")
        ("America/New_York" "US East")
        ("America/Chicago" "Chicago")
        ("America/Denver" "Denver")
        ("US/Hawaii" "Hawaii")
        ("Africa/Dakar" "Dakar")
        ("Europe/London" "London")
        ("Europe/Paris" "Paris")
        ("Europe/Berlin" "Berlin")
        ("Asia/Kolkata" "India")
        ("Asia/Shanghai" "China")
        ("Asia/Tokyo" "Tokyo")))

(setq display-time-world-time-format
      "%R %5Z (UTC%z) - %d %3h - %A")

(setq holiday-bahai-holidays nil)
(setq holiday-christian-holidays nil)
(setq holiday-hebrew-holidays nil)
(setq holiday-islamic-holidays nil)
(setq holiday-other-holidays
      ;; Edited from suomalainen-kalenteri.el
      '((holiday-fixed 1 1 "Uudenvuodenpäivä")
        (holiday-fixed 1 27 "Vainojen uhrien muistopäivä")
        (holiday-fixed 2 5 "J. L. Runebergin päivä (liputus)")
        (holiday-fixed 2 6 "Saamelaisten kansallispäivä")
        (holiday-fixed 2 28 "Kalevalan päivä, suomalaisen kulttuurin päivä (liputus)")
        (holiday-fixed 2 29 "Karkauspäivä")
        (holiday-fixed 3 8 "Kansainvälinen naistenpäivä")
        (holiday-fixed 3 19 "Minna Canthin päivä, tasa-arvon päivä (liputus)")
        (holiday-sexp '(if (>= year 2014) (list 4 8 year))
                      "Romanien kansallispäivä")
        (holiday-fixed 4 9 "Mikael Agricolan päivä, suomen kielen päivä (liputus)")
        (holiday-fixed 4 27 "Kansallinen veteraanipäivä (liputus)")
        (holiday-fixed 5 1 "Vappu, suomalaisen työn päivä (liputus)")
        (holiday-fixed 5 9 "Eurooppa-päivä (liputus)")
        (holiday-fixed 5 12 "J. V. Snellmanin päivä, suomalaisuuden päivä (liputus)")
        (holiday-float 5 0 2 "Äitienpäivä (liputus)")
        (holiday-float 5 0 3 "Kaatuneitten muistopäivä (liputus, puolitangossa)")
        (holiday-fixed 6 4 "Puolustusvoimain lippujuhlan päivä (liputus)")
        (holiday-fixed 6 5 "Maailman ympäristöpäivä")
        (holiday-float 6 6 1 "Juhannuspäivä, Suomen lipun päivä (liputus)" 20)
        (holiday-fixed 7 6 "Eino Leinon päivä, runon ja suven päivä (liputus)")
        (holiday-fixed 10 10 "Aleksis Kiven päivä, suomalaisen kirjallisuuden päivä (liputus)")
        (holiday-fixed 10 24 "YK:n päivä (liputus)")
        (holiday-float 10 6 1 "Pyhäinpäivä" 31)
        (holiday-fixed 11 6 "Ruotsalaisuuden päivä, Kustaa Aadolfin päivä (liputus)")
        (holiday-float 11 0 2 "Isänpäivä (liputus)")
        (holiday-fixed 11 20 "Lapsen oikeuksien päivä")
        (holiday-fixed 12 6 "Itsenäisyyspäivä (liputus)")
        (holiday-sexp '(if (>= year 2011) (list 12 8 year))  "Jean Sibeliuksen päivä, suomalaisen musiikin päivä (liputus)")
        ;; other days
        (holiday-fixed 7 14 "Bastille Day")
        (holiday-float 10 1 2 "Indigenous Peoples' Day")
        ;; muslim holidays
        (holiday-islamic 9 1 "Ramadan begins")
        (holiday-islamic 10 1 "Eid al-Fitr")
        (holiday-islamic 12 10 "Eid al-Adha")
        ;; jewish holidays
        (holiday-hebrew 7 1 "Rosh Hashanah")
        (holiday-hebrew 7 10 "Yom Kippur")
        (holiday-hebrew 3 25 "Hanukkah")
        ;; UN international days
        (holiday-fixed 3 20 "International Day of Happiness")
        (holiday-fixed 4 12 "International Day of Human Space Flight")
        (holiday-fixed 4 30 "International Jazz Day")
        (holiday-fixed 6 1 "Global Day of Parents")
        (holiday-fixed 6 21 "International Day of Yoga")
        (holiday-fixed 7 18 "Nelson Mandela International Day")
        (holiday-fixed 11 19 "World Toilet Day")
        (holiday-float 11 4 3 "World Philosophy Day")
        (holiday-fixed 11 20 "Universal Children's Day")
        ))

        
      
;; (setq holiday-local-holidays
;;       '((holiday-fixed 12 21 "BUSD Winter recess start")
;;         (holiday-fixed 6 17  "BUSD last day of school")))

(add-hook 'calendar-load-hook 
          (lambda () (calendar-set-date-style 'european)))
;; Location\ and\ calendar:1 ends here

;; Global key bindings


;; [[file:emacs.org::*Global%20key%20bindings][Global\ key\ bindings:1]]
(bind-key "RET" 'newline-and-indent)     ;; check back in 2030 if still needed

(bind-key "<f12>" 'other-frame)

;; using ivy for C-s
;;(global-set-key (kbd "C-s") 'swiper)
;;(bind-key "C-S" 'isearch-forward-regexp) ;; use regex variants of search
(bind-key "C-r" 'isearch-backward-regexp)
(bind-key "M-%" 'query-replace-regexp)

;; M-^ is join-line aka delete-indentation
(defun join-next-line ()
  "Join current line with one below."
  (interactive)
  (delete-indentation 1)
  )
(bind-key "C-^" 'join-next-line)

(bind-key "C-+" 'text-scale-increase)
(bind-key "C--" 'text-scale-decrease)

(bind-key "C-c z" 'bury-buffer)
(bind-key "C-x C-b" 'ibuffer)            ;; replace buffer-menu with ibuffer

;;(autoload 'zap-up-to-char "misc"
;;  "Kill up to, but not including ARGth occurrence of CHAR." t)
(bind-key "M-z" 'zap-up-to-char)

(bind-key "C-x m" 'eshell)
(bind-key "C-x M-m" 'shell)

(bind-key "M-/" 'hippie-expand)   ;; use hippie-expand instead of dabbrev
;; Global\ key\ bindings:1 ends here

;; Turn off debug


;; [[file:emacs.org::*Turn%20off%20debug][Turn\ off\ debug:1]]
(message "init.org: Looks like we got to the end of init OK.")
(setq debug-on-error nil)
(setq debug-on-quit nil)
;; Turn\ off\ debug:1 ends here

;; Load customization system generated variables 
;;    Set Emacs customizations to file custom.el.

;; [[file:emacs.org::*Load%20customization%20system%20generated%20variables][Load\ customization\ system\ generated\ variables:1]]
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
;; Load\ customization\ system\ generated\ variables:1 ends here
